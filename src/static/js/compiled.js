function cross(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]}function subtractVectors(a,b){return[a[0]-b[0],a[1]-b[1],a[2]-b[2]]}function normalize(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return 1E-5<b?[a[0]/b,a[1]/b,a[2]/b]:[0,0,0]};function makeLookAt(a,b,c){b=normalize(subtractVectors(a,b));c=cross(c,b);var e=cross(b,c);return[c[0],c[1],c[2],0,e[0],e[1],e[2],0,b[0],b[1],b[2],0,a[0],a[1],a[2],1]}function makePerspective(a,b,c,e){a=Math.tan(0.5*Math.PI-0.5*a);var f=1/(c-e);return[a/b,0,0,0,0,a,0,0,0,0,(c+e)*f,-1,0,0,c*e*f*2,0]}function makeTranslation(a,b,c){return[1,0,0,0,0,1,0,0,0,0,1,0,a,b,c,1]}function makeXRotation(a){var b=Math.cos(a);a=Math.sin(a);return[1,0,0,0,0,b,a,0,0,-a,b,0,0,0,0,1]}
function makeYRotation(a){var b=Math.cos(a);a=Math.sin(a);return[b,0,-a,0,0,1,0,0,a,0,b,0,0,0,0,1]}function makeZRotation(a){var b=Math.cos(a);a=Math.sin(a);return[b,a,0,0,-a,b,0,0,0,0,1,0,0,0,0,1]}function makeScale(a,b,c){return[a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1]}
function makeInverse(a){var b=a[0],c=a[1],e=a[2],f=a[3],g=a[4],d=a[5],l=a[6],m=a[7],k=a[8],h=a[9],r=a[10],n=a[11],p=a[12],q=a[13],s=a[14];a=a[15];var t=r*a,u=s*n,v=l*a,w=s*m,x=l*n,y=r*m,z=e*a,A=s*f,B=e*n,C=r*f,D=e*m,E=l*f,F=k*q,G=p*h,H=g*q,I=p*d,J=g*h,K=k*d,L=b*q,M=p*c,N=b*h,O=k*c,P=b*d,Q=g*c,R=t*d+w*h+x*q-(u*d+v*h+y*q),S=u*c+z*h+C*q-(t*c+A*h+B*q),q=v*c+A*d+D*q-(w*c+z*d+E*q),c=y*c+B*d+E*h-(x*c+C*d+D*h),d=1/(b*R+g*S+k*q+p*c);return[d*R,d*S,d*q,d*c,d*(u*g+v*k+y*p-(t*g+w*k+x*p)),d*(t*b+A*k+B*p-(u*b+
z*k+C*p)),d*(w*b+z*g+E*p-(v*b+A*g+D*p)),d*(x*b+C*g+D*k-(y*b+B*g+E*k)),d*(F*m+I*n+J*a-(G*m+H*n+K*a)),d*(G*f+L*n+O*a-(F*f+M*n+N*a)),d*(H*f+M*m+P*a-(I*f+L*m+Q*a)),d*(K*f+N*m+Q*n-(J*f+O*m+P*n)),d*(H*r+K*s+G*l-(J*s+F*l+I*r)),d*(N*s+F*e+M*r-(L*r+O*s+G*e)),d*(L*l+Q*s+I*e-(P*s+H*e+M*l)),d*(P*r+J*e+O*l-(N*l+Q*r+K*e))]}
function matrixMultiply(a,b){return[a[0]*b[0]+a[1]*b[4]+a[2]*b[8]+a[3]*b[12],a[0]*b[1]+a[1]*b[5]+a[2]*b[9]+a[3]*b[13],a[0]*b[2]+a[1]*b[6]+a[2]*b[10]+a[3]*b[14],a[0]*b[3]+a[1]*b[7]+a[2]*b[11]+a[3]*b[15],a[4]*b[0]+a[5]*b[4]+a[6]*b[8]+a[7]*b[12],a[4]*b[1]+a[5]*b[5]+a[6]*b[9]+a[7]*b[13],a[4]*b[2]+a[5]*b[6]+a[6]*b[10]+a[7]*b[14],a[4]*b[3]+a[5]*b[7]+a[6]*b[11]+a[7]*b[15],a[8]*b[0]+a[9]*b[4]+a[10]*b[8]+a[11]*b[12],a[8]*b[1]+a[9]*b[5]+a[10]*b[9]+a[11]*b[13],a[8]*b[2]+a[9]*b[6]+a[10]*b[10]+a[11]*b[14],a[8]*
b[3]+a[9]*b[7]+a[10]*b[11]+a[11]*b[15],a[12]*b[0]+a[13]*b[4]+a[14]*b[8]+a[15]*b[12],a[12]*b[1]+a[13]*b[5]+a[14]*b[9]+a[15]*b[13],a[12]*b[2]+a[13]*b[6]+a[14]*b[10]+a[15]*b[14],a[12]*b[3]+a[13]*b[7]+a[14]*b[11]+a[15]*b[15]]};var error=function(a){window.console&&(window.console.error?window.console.error(a):window.console.log&&window.console.log(a))},loadShader=function(a,b,c,e){e=e||error;c=a.createShader(c);a.shaderSource(c,b);a.compileShader(c);return a.getShaderParameter(c,a.COMPILE_STATUS)?c:(lastError=a.getShaderInfoLog(c),e("*** Error compiling shader '"+c+"':"+lastError),a.deleteShader(c),null)},createProgram=function(a,b,c,e){for(var f=a.createProgram(),g=0;g<b.length;g++)a.attachShader(f,b[g]);if(c)for(g=0;g<
c.length;g++)a.bindAttribLocation(f,e?e[g]:g,c[g]);a.linkProgram(f);return a.getProgramParameter(f,a.LINK_STATUS)?f:(lastError=a.getProgramInfoLog(f),error("Error in program linking: "+lastError),a.deleteProgram(f),null)};
$(document).ready(function(){var a=document.getElementById("canvas"),b=a.getContext("webgl")||a.getContext("experimental-webgl"),c,e;$.when($.get("/glsl/vertex.glsl",function(a){c=loadShader(b,a,b.VERTEX_SHADER)}),$.get("/glsl/fragment.glsl",function(a){e=loadShader(b,a,b.FRAGMENT_SHADER)})).then(function(){var f=createProgram(b,[c,e]);b.useProgram(f);var g=b.getAttribLocation(f,"a_position"),d=b.getAttribLocation(f,"a_color"),f=b.getUniformLocation(f,"u_matrix"),l=[0,0,0],m=[0*Math.PI/180,0*Math.PI/
180,0*Math.PI/180],k=[1,1,1],h=makeScale(k[0],k[1],k[2]),r=makeZRotation(m[2]),k=makeYRotation(m[1]),m=makeXRotation(m[0]),l=makeTranslation(l[0],l[1],l[2]),n=makeLookAt([-3,5,5],[0,0,0],[0,1,0]),n=makeInverse(n),p=makePerspective(55*Math.PI/180,a.width/a.height,1,2E3),h=matrixMultiply(h,r),h=matrixMultiply(h,k),h=matrixMultiply(h,m),h=matrixMultiply(h,l),h=matrixMultiply(h,n),h=matrixMultiply(h,p),k=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,k);b.bufferData(b.ARRAY_BUFFER,new Float32Array([-1,
1,1,1,-1,1,-1,-1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,1,1,1,1,1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,1]),b.STATIC_DRAW);b.enableVertexAttribArray(g);b.vertexAttribPointer(g,3,b.FLOAT,!1,0,0);b.uniformMatrix4fv(f,!1,h);g=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,g);b.bufferData(b.ARRAY_BUFFER,new Uint8Array([255,0,0,255,0,0,255,0,0,255,0,0,255,0,0,255,0,0,0,0,255,0,0,255,0,0,255,0,0,255,0,0,255,0,0,255,0,255,0,0,255,0,0,255,0,0,255,0,0,255,0,0,255,0]),b.STATIC_DRAW);b.enableVertexAttribArray(d);
b.vertexAttribPointer(d,3,b.UNSIGNED_BYTE,!0,0,0);b.drawArrays(b.TRIANGLES,0,18)})});
